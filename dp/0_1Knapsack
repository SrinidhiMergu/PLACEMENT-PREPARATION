#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


#define rep(i, a, b) for(int i=a;i<b;i++)

class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    //static int[][] dp = new int[n + 1][w + 1];
    //static int dp[1002][1002];
    int knapSack(int w, int wt[], int val[], int n) 
    { 
       //Initialization
       //static 
       int dp[n + 1][w + 1];
       rep(i, 0, n + 1){
           rep(j, 0, w + 1){
               if(i == 0 || j == 0){
                   dp[i][j] = 0;
               }
           }
       }
       //choice diagram
       rep(i, 1, n + 1){
           rep(j, 1, w + 1){
               if(wt[i - 1] <= j){
                   dp[i][j] = max(val[i - 1] + dp[i - 1][j - wt[i - 1]],
                                        dp[i - 1][j]);
               }
               else{
                    dp[i][j] = dp[i - 1][j];
               }
           }
       }
       return dp[n][w];
    }
};

// { Driver Code Starts.

int main()
 {
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //reading number of elements and weight
        int n, w;
        cin>>n>>w;
        
        int val[n];
        int wt[n];
        
        //inserting the values
        for(int i=0;i<n;i++)
            cin>>val[i];
        
        //inserting the weights
        for(int i=0;i<n;i++)
            cin>>wt[i];
        Solution ob;
        //calling method knapSack()
        cout<<ob.knapSack(w, wt, val, n)<<endl;
        
    }
	return 0;
}  // } Driver Code Ends
