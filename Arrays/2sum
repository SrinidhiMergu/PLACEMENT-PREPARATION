vector<int> twoSum(vector<int>& nums, int target) {
        int n=nums.size();
        unordered_map<int, int> mp;
        vector<int> ans(2);
        for(int i=0; i<n; i++){
            int pair = target - nums[i];
            if(mp.find(pair) == mp.end()){
                mp.insert(make_pair(nums[i], i));
            }
            else{
                
                ans[0]=i, ans[1]=mp[pair];
            }
        }
        return ans;
    }
    
    
     vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        int n=nums.size();
        sort(nums.begin(), nums.end());
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                int target2 = target - nums[i] - nums[j];
                int l=j+1, r=n-1;
                while(l<r){
                    int two_sum = nums[l] + nums[r];
                    if(two_sum < target2) l++;
                    else if(two_sum > target2) r--;
                    else{
                        vector<int> a(4, 0);
                        a[0] = nums[i];
                        a[1] = nums[j];
                        a[2] = nums[l];
                        a[3] = nums[r];
                        ans.push_back(a);
                        
                        while(l<r && a[2]==nums[l])++l;
                        while(l<r && a[3]==nums[r])--r;
                    }
                }
                while(j+1<n && nums[j]==nums[j+1]) ++j;
            }
            while(i+1<n && nums[i]==nums[i+1]) ++i;
        }
        return ans;
    }
