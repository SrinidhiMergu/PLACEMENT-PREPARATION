int noofways(int i, int j, int m, int n){
        if(i>=m || j>=n){
            return 0;
        }
        if(i==m-1 && j==n-1){
            return 1;
        }
        return noofways(i+1, j, m, n) + noofways(i, j+1, m, n);
    }
    int uniquePaths(int m, int n) {
        
        return noofways(0, 0, m, n);
        
        
 }
 
    int noofways(int i, int j, int m, int n, vector<vector<int>> &dp){
        if(i>=m || j>=n){
            return 0;
        }
        if(i==m-1 && j==n-1){
            return 1;
        }
        if(dp[i][j]!=-1) return dp[i][j];
        else
        return dp[i][j] = noofways(i+1, j, m, n, dp) + noofways(i, j+1, m, n, dp);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return noofways(0, 0, m, n, dp);
        
        
    }
    
    int ncr(int n, int r){
        double ans=1;
        for(int i=1; i<=r; i++){
            // ans *= (n-i);
            // ans /= (i+1);
            ans = ans * (n-r+i)/i;
        }
        return (int)ans;
    }

    int uniquePaths(int m, int n) {
       return ncr(m+n-2, m-1);
        
        
    }
